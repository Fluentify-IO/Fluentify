<template>
  <div :class="advanced.main">
    <div :class="[advanced.api, advanced.panel]">
      <span :class="advanced.title">{{ $gettext('API Settings') }}</span>
      <div :class="advanced.apiItem">
        <label :class="[advanced.subtitle, advanced.apiProvider]" for="provider">{{
          $gettext('Active API Provider')
        }}</label>
        <select id="provider" v-model="llmModel" name="provider">
          <option :class="advanced.iconLogo" selected value="gpt-3.5-turbo">
            {{ $gettext('OpenAI gpt-3.5-turbo') }}
          </option>
          <option value="gpt-4">{{ $gettext('OpenAI gpt-4') }}</option>
          <!-- <option value="baidu_wenxin">百度文心</option> -->
        </select>
        <img alt="" :class="advanced.dropdown" src="./images/dropdown.png" @click="openSelect" />
      </div>
      <div :class="advanced.apiItem">
        <label :class="advanced.subtitle" for="keys" style="margin-top: 20px">{{
          $gettext('Your API Key')
        }}</label>
        <input
          id="keys"
          v-model="authKey"
          :class="{[advanced.haveAuthKey]: store.config.authKey !== ''}"
          name="keys"
          :placeholder="authKeyPlaceHolder"
          role="authkey"
          type="text"
          @blur="onBlurSetAuthkey"
          @focus="onEditAuthKey"
        />
        <WebpilotAlert
          v-if="(error || success) && !isSelfHost"
          :auto-hide="true"
          style="margin-top: 8px"
          :tips="alertInfo.tips"
          :type="alertInfo.type"
          @on-hide="hideAlert"
        />

        <span :class="advanced.links">
          {{ $gettext('Visit') }}: <a :href="links" target="_blank">{{ links }}</a>
        </span>
        <div :class="advanced.host">
          <div :class="advanced.selfHost">
            <input
              id="self_host"
              v-model="isSelfHost"
              name="self_host"
              type="checkbox"
              @change="chekcCloseSelfHost"
            />
            <label for="self_host">Self Host</label>
          </div>
        </div>
        <div v-if="isSelfHost" :class="advanced.selfHostInput">
          <input
            v-model="selfHostUrl"
            placeholder="Enter your base address"
            @change="onChangeHostUrl"
          />
          <WebpilotAlert
            v-if="(error || success) && isSelfHost"
            style="margin-top: 8px"
            :tips="alertInfo.tips"
            :type="alertInfo.type"
          />
        </div>
      </div>

      <WebpilotButton
        :auto-hide="true"
        :loading="loading"
        style="width: 143px; margin-top: auto"
        :value="$gettext('Save Changes')"
        @click="save()"
        @on-hide="hideAlert"
      />
    </div>

    <div :class="[advanced.extension, advanced.panel]">
      <span :class="advanced.title">{{ $gettext('Extension Settings') }}</span>
      <span :class="[advanced.subtitle, advanced.displayMode]">{{ $gettext('Display Mode') }}</span>
      <div :class="advanced.mode">
        <!-- Sider bar under development -->
        <div v-if="false" :class="advanced.radioGroup">
          <input
            id="sideBar"
            :checked="store.config.displayMode == 'siderBar'"
            name="mode"
            type="radio"
            @input="changeMode('siderBar')"
          />
          <label for="sideBar">
            {{ $gettext('Side Bar') }}
            <img alt="sideBar" :class="advanced.modeImg" src="./images/Side_bar.svg" />
          </label>
        </div>
        <div :class="advanced.radioGroup">
          <input
            id="popUp"
            :checked="store.config.displayMode == 'popUp'"
            name="mode"
            type="radio"
            @input="changeMode('popUp')"
          />
          <label for="popUp">
            {{ $gettext('Pop Up') }}
            <img alt="popUp" :class="advanced.modeImg" src="./images/Pop_up.svg" />
          </label>
        </div>
      </div>

      <span :class="[advanced.subtitle, advanced.activeWebpilotTitle]">{{
        $gettext('Active Webpilot')
      }}</span>
      <div :class="advanced.activeWebpilot">
        <SwitchButton v-model="store.config.autoPopup" @on-change="onAutoPopupChange" />
        <div :class="advanced.activeWebpilotDesc">
          {{ $gettext('Display Webpilot') }} <img :src="WebpilotLogo" />
          {{ $gettext('when text is selected') }}
        </div>
      </div>

      <span :class="advanced.subtitle">{{ $gettext('Change Shortcut') }}</span>
      <div :class="advanced.shortcut">
        <ShortcutInput
          v-model="shortcutKeys"
          style="margin-top: 8px; margin-bottom: 22px"
          @change="onChangeShortcut"
        />
      </div>
    </div>
  </div>
</template>

<script setup>
import {computed, ref} from 'vue'
import {storeToRefs} from 'pinia'

import useStore from '@/stores/store'
import useAskAi from '@/hooks/useAskAi'
import WebpilotAlert from '@/components/WebpilotAlert.vue'
import WebpilotButton from '@/components/WebpilotButton.vue'
import ShortcutInput from '@/components/ShortcutInput.vue'

import {$gettext} from '@/utils/i18n'

import WebpilotLogo from '../../assets/icon.png'

import SwitchButton from './components/SwitchButton.vue'

const links = ref('https://platform.openai.com/account/api-keys')

const store = useStore()

const {loading, success, error, askAi} = useAskAi()

const {config} = storeToRefs(store)

const saveAuthKey = ref(config.value.authKey)
/** Edit Auth Key */
const authKey = ref('')
const authKeyPlaceHolder = computed(() => {
  const key = saveAuthKey.value === '' ? store.config.authKey : saveAuthKey.value

  if (key === '' || !key) return 'Enter your API Key from OpenAI'

  const startText = key.substring(0, 3)
  const endText = key.substring(key.length - 4, key.length)
  return `${startText}...${endText}`
})

const onEditAuthKey = () => {
  // use saved temp key first
  if (saveAuthKey.value !== '') {
    authKey.value = saveAuthKey.value
    return
  }

  // if cna't find local save auhtkey use storeconfig authkey
  const {authKey: key} = config.value
  if (key === '' || !key) return
  saveAuthKey.value = key
  authKey.value = key
}

const onBlurSetAuthkey = () => {
  saveAuthKey.value = authKey.value

  if (authKey.value !== '') authKey.value = ''
}

const alertInfo = computed(() => {
  // Alet info for token
  if (!isSelfHost.value) {
    if (success.value) return {type: 'success', tips: 'Successfully added'}
    if (error.value)
      return {type: 'error', tips: 'Incorrect API Key. Please check with the provider'}
  }

  if (success.value) return {type: 'success', tips: 'Successfully added '}
  if (error.value) return {type: 'error', tips: "Can't add this address"}

  return {
    type: '',
    tips: '',
  }
})

// Model Type
const llmModel = ref(config.value.model.model)

// Self Host
const isSelfHost = ref(!!config.value.selfHostUrl)
const selfHostUrl = ref(config.value.selfHostUrl)

const save = async () => {
  store.setConfig({
    ...store.config,
    model: {
      ...store.config.model,
      model: llmModel.value,
    },
  })

  if (
    saveAuthKey.value === store.config.authKey &&
    selfHostUrl.value === store.config.selfHostUrl
  ) {
    return
  }

  // Check Toekn validation
  await askAi({
    authKey: saveAuthKey.value,
    command: 'Say hi.',
    url: selfHostUrl.value,
  })

  store.setConfig({
    ...store.config,
    isAuth: true,
    authKey: saveAuthKey.value,
    isFinishSetup: true,
    selfHostUrl: selfHostUrl.value !== '' ? selfHostUrl.value : '',
  })
}

const chekcCloseSelfHost = () => {
  if (!isSelfHost.value) selfHostUrl.value = ''
}

// Display Mode
const changeMode = str => {
  store.config.displayMode = str
  store.setConfig(store.config)
}

// Active Select popup
const onAutoPopupChange = value => {
  store.config.autoPopup = value
  store.setConfig(store.config)
}

// Shortcut
const shortcutKeys = ref(config.value.customShortcut)

const onChangeShortcut = customShortcut => {
  store.setConfig({
    ...store.config,
    customShortcut,
  })
}

// alert
const hideAlert = () => {
  error.value = false
  success.value = false
}
</script>

<style module="advanced" lang="scss">
.openAiLogo {
  width: 22px;
  height: 22px;
}

.main {
  padding: 24px 0;
  padding-top: 15px;
  font-family: 'PingFang SC', Helvetica, Arial, sans-serif;
}

.panel {
  display: flex;
  flex-direction: column;
  padding: 24px 16px;
  background-color: white;
  border-radius: 10px;

  &:last-child {
    margin-top: 27px;
  }

  .title {
    color: #4f5aff;
    font-weight: 400;
    font-size: 24px;
    line-height: 34px;
  }

  .subtitle {
    margin-top: 24px;
    color: #292929;
    font-weight: 400;
    font-size: 18px;
    line-height: 25px;
  }

  .displayMode {
    margin-top: 15px;
  }

  .apiProvider {
    margin-top: 16px;
  }

  select,
  input[type='text'][role='authkey'] {
    width: 360px;
    height: 36px;
    margin-top: 8px;
    padding-left: 8px;
    font-size: 14px;
    line-height: 20px;
    border: 1px solid #dcdee1;
    border-radius: 5px;
  }

  select {
    padding-left: 38px;
    background: url('./images/edit.svg') no-repeat;
    background-position: 10px center;
    background-size: 22px 22px;
    appearance: none;
  }

  .dropdown {
    position: relative;
    top: -20px;
    left: 340px;
    width: 10px;
    height: 6px;
  }

  option {
    font-size: 14px;
    line-height: 20px;
  }

  .links {
    margin-top: 8px;
    font-size: 14px;
    line-height: 20px;
  }
}

.api {
  display: flex;
  flex-direction: column;
  height: 426px;
  padding: 16px 24px;
}

.apiItem {
  display: flex;
  flex-direction: column;
}

.haveAuthKey::placeholder {
  color: #292929;
}

.host {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  width: 360px;
  margin-top: 8px;
}

.selfHost {
  display: flex;
  flex-direction: row;
  align-items: center;
  cursor: pointer;

  * {
    cursor: pointer;
  }

  input {
    width: 16px;
    height: 16px;
    margin: 0;
    margin-right: 8px;
  }

  label {
    margin-top: 0;
    font-size: 14px;
    line-height: 20px;
    user-select: none;
  }
}

.selfHostInput {
  margin-top: 8px;

  input {
    width: 360px;
    height: 36px;
    padding: 8px;
    font-weight: 400;
    font-size: 14px;
    line-height: 20px;
    border: 1px solid #dcdee1;
    border-radius: 5px;
  }
}

.more {
  /* identical to box height */
  display: inline;
  color: #585b58;
  font-size: 14px;
  line-height: 20px;
  text-align: right;
  text-decoration-line: underline;

  .question_mark {
    display: inline;
    width: 16px;
    height: 16px;
    margin-right: 6px;
    vertical-align: middle;
  }
}

.saveButton {
  width: 143px;
  margin-top: auto;
  padding: 8px 16px;
  color: white;
  font-weight: 500;
  font-size: 14px;
  font-family: 'PingFang SC', Helvetica, Arial, sans-serif;
  line-height: 20px;
  background-color: #929497;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

.mode {
  display: flex;
}

.radioGroup {
  display: flex;

  * {
    cursor: pointer;
  }

  &:first-child {
    margin-right: 33px;
  }

  input {
    margin-top: 0;
    margin-right: 11px;
  }

  label {
    display: flex;
    color: #585b58;
    font-weight: 400;
    font-size: 14px;
    line-height: 64px;
  }

  .modeImg {
    margin-left: 9px;
  }
}

.extension {
  margin-top: 20px !important;
  color: yellow;
}

.activeWebpilot {
  display: flex;
  margin-top: 9px;

  div {
    display: inline;
    padding-left: 6px;
    color: #585b58;
    font-weight: 400;
    font-size: 14px;
    line-height: 20px;
  }

  img {
    display: inline-block;
    width: 16px;
    height: 16px;
    margin: 0 4px;
  }
}

.activeWebpilotDesc {
  display: flex;
  flex-direction: row;
  align-items: center;
}

.activeWebpilotTitle {
  margin-top: 12px !important;
}
</style>
